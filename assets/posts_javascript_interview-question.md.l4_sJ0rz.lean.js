import{_ as t,c as r,j as e,a as l,t as s,a5 as o,o as n}from"./chunks/framework.B7jOzF09.js";const g=JSON.parse('{"title":"前端面试手写题","description":"","frontmatter":{"author":"Io_oTI","date":"2024-07-12T00:00:00.000Z","publish":false,"tag":"javascript","title":"前端面试手写题"},"headers":[],"relativePath":"posts/javascript/interview-question.md","filePath":"posts/javascript/interview-question.md","lastUpdated":1735550718000}'),c={name:"posts/javascript/interview-question.md"},d={id:"frontmatter-title",tabindex:"-1"};function p(i,a,h,u,j,b){return n(),r("div",null,[e("h1",d,[l(s(i.$frontmatter.title)+" ",1),a[0]||(a[0]=e("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }}"'},"​",-1))]),a[1]||(a[1]=o('<p>整理前端面试常见的手写题，面试出现概率极高，建议每个都过自己过一遍。</p><p>你也可以提交 PR，提供你面试遇到的题目。</p><p>代码汇总请参照 <a href="./summary">summary.md</a> 。</p><table tabindex="0"><thead><tr><th style="text-align:center;"><strong>高频</strong></th><th style="text-align:center;"><strong>中频</strong></th><th style="text-align:center;"><strong>低频</strong></th></tr></thead><tbody><tr><td style="text-align:center;">★★★</td><td style="text-align:center;">★★</td><td style="text-align:center;">★</td></tr></tbody></table><h2 id="javascript-原理实现" tabindex="-1">JavaScript 原理实现 <a class="header-anchor" href="#javascript-原理实现" aria-label="Permalink to &quot;JavaScript 原理实现&quot;">​</a></h2><ul><li>[ ] <a href="../../playground/javascript/basic/bind.js">实现 bind()</a> ★★</li><li>[ ] <a href="../../playground/javascript/basic/apply.js">实现 apply()</a> ★★</li><li>[ ] <a href="../../playground/javascript/basic/call.js">实现 call()</a> ★★</li><li>[ ] <a href="../../playground/javascript/basic/instanceof.js">实现 instanceof</a> ★</li><li>[ ] <a href="../../playground/javascript/basic/new.js">实现 new</a> ★</li><li>[ ] <a href="../../playground/javascript/basic/promise.js">实现 Promise</a> ★★★</li><li>[ ] <a href="../../playground/javascript/basic/promiseAll.js">实现 Promise.all()</a> ★★★</li><li>[ ] <a href="../../playground/javascript/basic/promiseRace.js">实现 Promise.race()</a> ★</li><li>[ ] <a href="../../playground/javascript/basic/proxy.js">实现 Proxy</a> ★★</li><li>[ ] <a href="../../playground/javascript/basic/subscribe.js">实现 EventEmitter 订阅监听模式</a> ★★</li><li>[ ] <a href="../../playground/javascript/basic/interval.js">setTimout 实现 setInterval</a> ★</li><li>[ ] <a href="../../playground/javascript/basic/deepclone.js">深拷贝</a> ★★★</li></ul><h2 id="布尔" tabindex="-1">布尔 <a class="header-anchor" href="#布尔" aria-label="Permalink to &quot;布尔&quot;">​</a></h2><h2 id="数值" tabindex="-1">数值 <a class="header-anchor" href="#数值" aria-label="Permalink to &quot;数值&quot;">​</a></h2><ul><li>[ ] <a href="../../playground/javascript/basic/number/pi.js">计算圆周率</a> ★</li></ul><h2 id="字符串" tabindex="-1">字符串 <a class="header-anchor" href="#字符串" aria-label="Permalink to &quot;字符串&quot;">​</a></h2><ul><li>[ ] <a href="../../playground/javascript/basic/string/trim.js">去除字符串首尾空格</a> ★</li><li>[ ] <a href="../../playground/javascript/basic/string/camel.js">下划线驼峰互转</a> ★</li></ul><h2 id="对象" tabindex="-1">对象 <a class="header-anchor" href="#对象" aria-label="Permalink to &quot;对象&quot;">​</a></h2><h3 id="数组" tabindex="-1">数组 <a class="header-anchor" href="#数组" aria-label="Permalink to &quot;数组&quot;">​</a></h3><ul><li>[ ] <a href="../../playground/javascript/basic/object/array/flatten.js">数组扁平化</a> ★★★</li><li>[ ] <a href="../../playground/javascript/basic/object/array/unique.js">数组去重</a> ★★★</li><li>[ ] <a href="../../playground/javascript/basic/object/array/array2Object.js">数组转对象</a> ★</li></ul><h3 id="函数" tabindex="-1">函数 <a class="header-anchor" href="#函数" aria-label="Permalink to &quot;函数&quot;">​</a></h3><ul><li>[ ] <a href="../../playground/javascript/basic/object/function/debounce.js">函数防抖</a> ★★★</li><li>[ ] <a href="../../playground/javascript/basic/object/function/throttle.js">函数节流</a> ★★★</li><li>[ ] <a href="../../playground/javascript/basic/object/function/curry.js">函数柯里化（实现 <code>sum(1,2)(3)()</code>）</a> ★★★</li><li>[ ] <a href="../../playground/javascript/basic/object/function/compose.js">compose 函数</a> ★★</li><li>[ ] <a href="../../playground/javascript/basic/object/function/before.js">before 函数</a> ★</li></ul><h2 id="算法" tabindex="-1">算法 <a class="header-anchor" href="#算法" aria-label="Permalink to &quot;算法&quot;">​</a></h2><p>算法需要掌握基本的数据结构，例如栈、队列、链表、树、排序算法等等，建议去 <a href="https://leetcode-cn.com/" target="_blank" rel="noreferrer">LeetCode</a> 上刷题。不过不要为了刷题而刷题，最重要的是归纳与总结，<strong>刷十道不如一道刷十遍。</strong></p><ul><li>[ ] <a href="../../playground/javascript/basic/mergeSort.js">归并排序</a> ★★</li><li>[ ] <a href="../../playground/javascript/basic/insertionSort.js">插入排序</a> ★</li><li>[ ] <a href="../../playground/javascript/basic/quickSort.js">快速排序</a> ★★★</li><li>[ ] <a href="../../playground/javascript/basic/selectionSort.js">选择排序</a> ★</li><li>[ ] <a href="../../playground/javascript/basic/shellSort.js">希尔排序</a> ★</li><li>[ ] <a href="../../playground/javascript/basic/heapSort.js">堆排序</a> ★</li><li>[ ] <a href="../../playground/javascript/basic/binarySearch.js">二分查找</a> ★</li><li>[ ] <a href="../../playground/javascript/basic/lis.js">最长递增子序列</a> ★★★</li><li>[ ] <a href="../../playground/javascript/basic/longestCommonPrefix.js">最长公共子串</a> ★★</li><li>[ ] <a href="../../playground/javascript/basic/city.js">城市数据找父节点</a> ★</li><li>[ ] <a href="../../playground/javascript/basic/missingNumber.js">查找缺失的数</a> ★</li></ul><h3 id="leet-code" tabindex="-1">leet code <a class="header-anchor" href="#leet-code" aria-label="Permalink to &quot;leet code&quot;">​</a></h3><p>分享一下自己整理的 LeetCode 上必刷的题，比较具有代表性。</p><ul><li>[ ] LeetCode 001 Two Sum</li><li>[ ] LeetCode 015 3Sum(可能会问 LeetCode18.4Sum 思路)</li><li>[ ] LeetCode 020 Valid Parentheses</li><li>[ ] LeetCode 021 Merge Two Sorted Lists</li><li>[ ] LeetCode 025 Reverse Nodes in k-group</li><li>[ ] LeetCode 053 Maximum Subarra</li><li>[ ] LeetCode 066 Plus One(等介于:高精度加加法)</li><li>[ ] LeetCode 098 Validate Binary Search Tree</li><li>[ ] LeetCode 110 Balanced Binary Tree</li><li>[ ] LeetCode 134 Gas Station</li><li>[ ] LeetCode 136 Single Number</li><li>[ ] LeetCode 137 Single Number II</li><li>[ ] LeetCode 146 LRU Cache(变形题:带有过期时间的 LRU 缓存)（Map + 链表）</li><li>[ ] LeetCode 206 Reverse Linked List（递归、迭代）</li><li>[ ] LeetCode 215 Kth Largest Element in an Array(等价于:快速排序)</li><li>[ ] LeetCode 232 Implement Queue using Stacks(每次将新来的元素放到栈底，stack.push())</li><li>[ ] LeetCode 328 Odd Even Linked List</li><li>[ ] LeetCode 415 Add Strings(等价于:大数加法)</li><li>[ ] LeetCode 470 rand70rand100</li><li>[ ] LeetCode 496 Next Greater Element I(时间复杂度 O(n)(单调栈，使用 Map 映射 stack 的指定位置)</li><li>[ ] LeetCode 716 Max Stack(两个栈实现最大栈,要求 pop,push, get max 都为 0(1)</li><li>[ ] LeetCode 860 Lemonade Change</li></ul>',22))])}const m=t(c,[["render",p]]);export{g as __pageData,m as default};
